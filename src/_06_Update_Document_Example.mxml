<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   width="100%"
			   height="100%"
			   creationComplete="onCreationComplete(event)">
	<fx:Script>
		<![CDATA[
			import as3.mongo.Mongo;
			import as3.mongo.db.DB;
			import as3.mongo.db.credentials.Credentials;
			import as3.mongo.db.document.Document;
			import as3.mongo.wire.cursor.Cursor;
			import as3.mongo.wire.messages.database.OpReply;

			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.utils.Base64Encoder;
			import mx.utils.ObjectUtil;

			import spark.events.GridSelectionEvent;

			private var mongo:Mongo;
			private var mongoDB:DB;

			protected function onCreationComplete(event:FlexEvent):void
			{
				// Starts a Mongo object pointed to the correct host (localhost for this example)
				// and gets a reference to a DB object using the 'mongoas3_intro' database.
				initializeMongoDB();


				// Sets up the connected and connectionFailed signals with callbacks to handle
				// those callbacks and then establishes a connection with MongoDB.
				connectMongoDB();
			}

			private function initializeMongoDB():void
			{
				// Change host to your MongoDB IP address, port defaults to 
				// 27017 or can be changed in second parameter
				mongo = new Mongo("localhost");


				// The db() method on the Mongo object returns a DB object.
				// Subsequent calls to the db() method with the same string
				// will return the same DB object instance, so its ok to 
				// use the db() function more than once, or just store a 
				// reference to the DB object as a class member. Both 
				// options are valid and its a matter of personal prefernce.
				mongoDB = mongo.db("mongoas3_intro");
			}

			private function connectMongoDB():void
			{
				// Add a callback in case the driver fails to establish a connection 
				// with the MongoDB server.
				mongoDB.connectionFailed.add(onConnectionFailed);


				// Add a callback for when the driver establishes a connection
				// with the MongoDB server.
				mongoDB.connected.add(onConnectedToDB);


				// Establishes the initial connection before any operations can be
				// done on the MongoDB server.
				mongoDB.connect();
			}

			private function onConnectionFailed(db:DB):void
			{
				Alert.show("Problem connecting to the database.", "Connection Failed");
			}

			private function onConnectedToDB(db:DB):void
			{
				// The Credentials object must be created to authenticate with the MongoDB
				// server and use the database. Here is an opportunity to establish a secure
				// connection to a remote API to retrieve credentials for the database via
				// some kind of exchange similar to OAuth. This way the database credentials
				// don't have to be compiled into the SWF.
				var credentials:Credentials = new Credentials("dbUser", "dbPassword");
				mongoDB.setCredentials(credentials);


				// Add a callback function in case that there is a problem authenticating 
				// the user with the DB object
				mongoDB.authenticationProblem.add(onAuthenticationProblem);


				// Add a callback function for when the user is authenticated with access
				// to the selected DB object.
				mongoDB.authenticated.add(onAuthenticated);


				// Authenticate the user/password in the Credentials object
				mongoDB.authenticate();
			}

			private function onAuthenticationProblem(db:DB):void
			{
				Alert.show("Problem authenticating to the database.", "Authentication Problem");
			}

			private function onAuthenticated(db:DB):void
			{
				// The DB has authenticated the Credentials and we are ready to perform
				// operations on the database and retrieve the users that have been
				// saved to the MongoDB database.
				loadUsersIntoDataGrid();


				// Add listener to the grid for when a user is selected in the grid to enable the delete button
				myGrid.addEventListener(GridSelectionEvent.SELECTION_CHANGE, onGridSelectionChanged);
			}

			private function loadUsersIntoDataGrid():void
			{
				// An empty Document object will yield all documents in the 'users' collection.
				// A callback is added to the Cursor received signal that is returned from
				// the find() operation.
				mongoDB.collection("users").find(new Document()).add(onFindUsersCursorReceived);
			}

			private function onFindUsersCursorReceived(cursor:Cursor):void
			{
				// The Cursor object has a toArray() method that lets you get an Array
				// of Object instances that are all the documents returned from the query.
				var users:Array = cursor.toArray();

				// Assign to a DataGrid as you normally would
				myGrid.dataProvider = new ArrayCollection(users);

				// Add a click listener for the update screen name button, triggers a updateFirst() command.
				ui_btn_update.addEventListener(MouseEvent.CLICK, onUpdateScreenNameClick);

				// Add a click listener for the refresh button so the data grid can update the users.
				ui_btn_refresh.addEventListener(MouseEvent.CLICK, onRefreshClick);
			}

			private function onGridSelectionChanged(event:GridSelectionEvent):void
			{
				// When an item is selected in the grid, use the screenName from the
				// user document object to update the interface.
				ui_ti_screenName.text = myGrid.selectedItem.screenName;


				// Turns on the form, the form starts disabled.
				screenNameChangeForm.enabled = true;
			}

			private function onRefreshClick(event:MouseEvent):void
			{
				// Refresh data grid
				loadUsersIntoDataGrid();
			}

			private function onUpdateScreenNameClick(event:MouseEvent):void
			{
				// The selectedItem on the DataGrid is the user document object
				var user:Object       = myGrid.selectedItem;

				// A selector Document object is created using the _id property of the
				// user document to update the Document object using with the unique ObjectID.
				var selector:Document = new Document();
				selector.put("_id", user._id);

				// In basic update commands all fields must be included in the modifier
				// Document object. If a field is left out like lastName the document in
				// MongoDB will no longer have a lastName property. This approach can
				// be useful depending on your use case, but transfer more data overall
				// since all fields must always be sent in the update command. In example
				// _07_ is how to update just using the actual updated fields without
				// sending all fields edited or not.
				var modifier:Document = new Document();
				modifier.put("firstName", user.firstName);
				modifier.put("lastName", user.lastName);
				modifier.put("screenName", ui_ti_screenName.text);
				modifier.put("password", user.password);


				// To run basic update commands use the updateFirst() method. The update() method
				// will require you to use an advanced command, those that start with $ as can be 
				// seen in example _07_.  
				mongoDB.collection("users").updateFirst(selector, modifier);


				// Like the insert() and remove() commands the updateFirst() does not result in a 
				// OpReply object being sent by MongoDB. To check the outcome of the updateFirst()
				// command run the getLastError command.
				mongoDB.runCommand(new Document("getlasterror:")).add(onUpdateUserErrorReply);
			}

			private function onUpdateUserErrorReply(opReply:OpReply):void
			{
				// Displays the outcome in the OpReply object. If a document was updated the 
				// opReply.documents[0].n property will be equal to something greater than 0.
				// Also, the opReply.documents[0].ok property should be equal to 1.
				Alert.show(ObjectUtil.toString(opReply), "User Updated Error Status");

				// Refresh data grid
				loadUsersIntoDataGrid();
			}
		]]>
	</fx:Script>
	<s:layout>
		<s:VerticalLayout />
	</s:layout>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>

	<s:Group width="100%" height="40">

		<s:Button id="ui_btn_refresh"
				  label="Refresh"
				  right="10"
				  verticalCenter="0" />
	</s:Group>

	<s:HGroup width="100%" height="100%">
		<s:Form id="screenNameChangeForm" enabled="false">
			<s:FormItem label="ScreenName:">
				<s:TextInput id="ui_ti_screenName" />
			</s:FormItem>

			<s:FormItem>
				<s:Button id="ui_btn_update" label="Update ScreenName" />
			</s:FormItem>
		</s:Form>

		<s:DataGrid id="myGrid"
					width="100%"
					height="100%">
			<s:columns>
				<s:ArrayList>
					<s:GridColumn dataField="firstName" headerText="First Name" />
					<s:GridColumn dataField="lastName" headerText="Last Name" />
					<s:GridColumn dataField="screenName" headerText="ScreenName" />
					<s:GridColumn dataField="password" headerText="Password" />
				</s:ArrayList>
			</s:columns>
		</s:DataGrid>
	</s:HGroup>

</s:Application>
